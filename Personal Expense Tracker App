name: Android Release

on:
  push:
    #    branches:
    #      - "dev2"
    tags:
      - "*"

  workflow_dispatch:

jobs:
  build:
    name: Create Android Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.KEYSTORE }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> android/key.properties
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: gradle
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true
      - name: Get dependencies
        run: flutter pub get

      - name: Build Android Release APK
        run: flutter build apk --flavor prod --no-tree-shake-icons

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/flutter-apk/app-prod-release.apk
          token: ${{ secrets.GITHUB_TOKEN  }}
          generateReleaseNotes: true
          makeLatest: true
          bodyFile: "body.md"

      - name: Create Android release appbundle
        run: flutter build appbundle --flavor prod --no-tree-shake-icons

      - name: Upload Android Release
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: build/app/outputs/bundle/prodRelease/app-prod-release.aab

  deploy:
    name: Deploy Android Build
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout artifacts
        uses: actions/checkout@v4

      - name: Get Android Build from artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release
      - name: Release Build to internal track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON  }}
          packageName: dev.hemanths.paisa
          releaseFiles: app-prod-release.aab
          track: internal
          status: completed
          inAppUpdatePriority: 5
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "[Dev] Paisa",
            "request": "launch",
            "type": "dart",
            "args": [
                "--flavor",
                "dev",
                "--target",
                "lib/main.dart"
            ]
        },
        {
            "name": "[Prod] Paisa",
            "request": "launch",
            "type": "dart",
            "args": [
                "--flavor",
                "prod",
                "--target",
                "lib/main.dart"
            ]
        },
        {
            "name": "[Profile] Paisa",
            "request": "launch",
            "type": "dart",
            "flutterMode": "profile",
            "args": [
                "--flavor",
                "dev",
                "--target",
                "lib/main.dart"
            ]
        }
    ]
}
{}
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new RuntimeException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "dev.hemanths.paisa"
    testNamespace "dev.hemanths.paisa.dev"
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "dev.hemanths.paisa"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        prod {
            dimension "app"
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="dev.hemanths.paisa">
    <!-- Flutter needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
